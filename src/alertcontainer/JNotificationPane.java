/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package alertcontainer;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ContainerEvent;
import java.beans.BeanProperty;
import java.beans.Beans;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.util.HashMap;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.SequentialGroup;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Sachira Jayawardana
 */
public class JNotificationPane extends javax.swing.JPanel implements Serializable {

    private JScrollPane scrollContainer;
    private JPanel notificationRootPanel;
    private JAlertPosition position;
    private JLayeredPane layeredPane;
    private JPanel designerContainer;

    /**
     * Creates new form JAlertContainer
     */
    public JNotificationPane() {
        initComponents();
    }

    public JAlertPosition getPosition() {
        return position;
    }

    public JScrollPane getScrollContainer() {
        return scrollContainer;
    }

    public JPanel getRoot() {
        return notificationRootPanel;
    }

    @BeanProperty
    public JPanel getDesignerContainer() {
        return designerContainer;
    }

    public void setPosition(JAlertPosition position) {
        this.position = position;
    }

    public void setScrollContainer(JScrollPane scrollContainer) {
        this.scrollContainer = scrollContainer;
    }

    public void setNotificationRootPanel(JPanel notificationRootPanel) {
        this.notificationRootPanel = notificationRootPanel;
    }

    public void setLayeredPane(JLayeredPane layeredPane) {
        this.layeredPane = layeredPane;
    }

    public void setDesignerContainer(JPanel designerContainer) {
        this.designerContainer = designerContainer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0), "Drop root component here", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));
        setPreferredSize(new java.awt.Dimension(200, 200));
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                formComponentRemoved(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
        setBorder(null);
    }//GEN-LAST:event_formComponentAdded

    private void formComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentRemoved
        // TODO add your handling code here:
        if (getComponents().length == 0) {
            setBorder(BorderFactory.createTitledBorder(
                    BorderFactory.createEmptyBorder(0, 0, 0, 0),
                    "Drop root component here",
                    TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));
        }
    }//GEN-LAST:event_formComponentRemoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void initNotificationContainer() {
        scrollContainer = new javax.swing.JScrollPane();
        scrollContainer.setBorder(null);
        scrollContainer.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollContainer.setAutoscrolls(true);
        scrollContainer.setMinimumSize(new java.awt.Dimension(16, 90));
        scrollContainer.setPreferredSize(new java.awt.Dimension(400, 120));
        scrollContainer.setViewportView(null);
        scrollContainer.setVisible(false);

        notificationRootPanel = new javax.swing.JPanel();
        notificationRootPanel.setOpaque(false);
        notificationRootPanel.setPreferredSize(new java.awt.Dimension(400, 100));
        notificationRootPanel.addPropertyChangeListener("HIDE", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                notifyPropertyChange(evt);
            }
        });
        notificationRootPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                notificationRootPanelComponentAdded(evt);
            }
        });

        notificationRootPanel.setLayout(null);
        notificationRootPanel.setVisible(false);
        scrollContainer.setViewportView(notificationRootPanel);

        scrollContainer.add(notificationRootPanel);
        layeredPane.setLayer(scrollContainer, JLayeredPane.PALETTE_LAYER);
//        updatePanelPosition(scrollContainer, JAlertPosition.TR);
        System.out.println("wada");
    }

    private void notifyPropertyChange(PropertyChangeEvent evt) {
        System.out.println("Fire");
        int gap = 10;
        int height = (int) evt.getNewValue();
        int newHeight = (height + gap) * (notificationRootPanel.getComponentCount());
        int curHeight = scrollContainer.getHeight();
        int padding = 12;
        if (newHeight < curHeight) {
            System.out.println("resize");
            Dimension d = new Dimension(
                    scrollContainer.getWidth(),
                    newHeight + gap
            );
            scrollContainer.setPreferredSize(d);
        }
        if (notificationRootPanel.getComponentCount() >= 1) {

            newHeight = (height + gap) * notificationRootPanel.getComponentCount();
            if (notificationRootPanel.getHeight() > newHeight) {
                notificationRootPanel.setPreferredSize(
                        new Dimension(
                                notificationRootPanel.getWidth(),
                                newHeight
                        )
                );
            }

        }
        scrollContainer.getParent().revalidate();
        scrollContainer.getParent().repaint();

    }

    private void notificationRootPanelComponentAdded(ContainerEvent evt) {
        new Thread(() -> {
            int gap = 10;
            int height = evt.getChild().getHeight();
            int newHeight = (height + gap) * (notificationRootPanel.getComponentCount());
            int curHeight = scrollContainer.getHeight();
            int padding = 12;
            if (curHeight < newHeight) {
                if (newHeight <= (scrollContainer.getParent().getHeight() - padding)) {
                    System.out.println("resize");
                    scrollContainer.setPreferredSize(
                            new Dimension(
                                    scrollContainer.getWidth(),
                                    newHeight + gap
                            )
                    );
                } else {
                    scrollContainer.setPreferredSize(
                            new Dimension(
                                    scrollContainer.getWidth(),
                                    (scrollContainer.getParent().getHeight() - padding)
                            )
                    );
                }

            }
            scrollContainer.getParent().revalidate();
            scrollContainer.getParent().repaint();

        }).start();
    }

    private HashMap<String, SequentialGroup> updatePanelPosition(GroupLayout layout,JAlertPosition position) {
        
        HashMap<String, SequentialGroup> groups = new HashMap<>();
        int maxHGap = Short.MAX_VALUE;
        int maxVGap = Short.MAX_VALUE;
        int hGap = 0;
        int vGap = 0;
        switch (position) {
            case BL -> {
                hGap = maxHGap = 5;
            }
            case TL -> {
                maxHGap = maxVGap = hGap = vGap = 5;
            }
            case TR -> {
                vGap = maxVGap = 5;
            }
        }

        SequentialGroup hGroup = layout.createSequentialGroup()
                .addGap(hGap, hGap, maxHGap)
                .addComponent(scrollContainer, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE,
                        GroupLayout.PREFERRED_SIZE);
        if (position.name().contains("L")) {
            hGroup.addContainerGap(0, Short.MAX_VALUE);
        } else {
            hGroup.addContainerGap();
        }
        groups.put("h", hGroup);
        SequentialGroup vGroup = layout.createSequentialGroup()
                .addGap(vGap, vGap, maxVGap)
                .addComponent(scrollContainer, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE,
                        GroupLayout.PREFERRED_SIZE);
        if (position.name().contains("T")) {
            vGroup.addContainerGap(0, Short.MAX_VALUE);
        } else {
            vGroup.addContainerGap();
        }
        groups.put("v", vGroup);
//        layout.setHorizontalGroup(
//                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
//                        .addGroup(GroupLayout.Alignment.LEADING, hGroup)
//        );
//        layout.setVerticalGroup(
//                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
//                        .addGroup(vGroup)
//        );
//        layeredPane.revalidate();
//        layeredPane.repaint();
        return groups;
    }

    private void initializeRuntime() {
        layeredPane = new javax.swing.JLayeredPane();
        designerContainer = new javax.swing.JPanel(new BorderLayout());
        designerContainer.setBackground(new java.awt.Color(204, 204, 204));

        initNotificationContainer();
        layeredPane.setLayer(designerContainer, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(layeredPane);
        layeredPane.setLayout(layout);
        HashMap<String, SequentialGroup> groups = updatePanelPosition(layout, JAlertPosition.TR);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(
                                        designerContainer,
                                        GroupLayout.DEFAULT_SIZE,
                                        200,
                                        Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING,groups.get("h")))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(designerContainer,
                                        GroupLayout.DEFAULT_SIZE,
                                        200,
                                        Short.MAX_VALUE)
                                .addContainerGap())
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.LEADING,groups.get("v")))
        );

        // Transfer design-time components into designerContainer
        Component[] components = getComponents();
        removeAll(); // clear outer container

        if (components.length > 0) {
            for (Component c : components) {
                designerContainer.add(c); // move into designerContainer
            }
            System.out.println("Design-time components transferred.");
        }else{
            System.out.println("no components");
        }

        // Add layeredPane to main container
        setLayout(new BorderLayout());
        add(layeredPane, BorderLayout.CENTER);

        // Initialize alert system
        
        revalidate();
        repaint();
    }
    
    public void initRuntime(){
        ActiveNotificationPane anp = new ActiveNotificationPane(this);
         // Transfer design-time components into designerContainer
        Component[] components = getComponents();
        removeAll(); // clear outer container

        if (components.length > 0) {
            for (Component desingnerRoot : components) {
                designerContainer.add(desingnerRoot); // move into designerContainer
            }
            System.out.println("Design-time components transferred.");
        }else{
            System.out.println("no components");
        }
        for (Component root : anp.getComponents()) {
            add(root);
        }
        revalidate();
        repaint();
    }
}
